// The number crunching stuff
// Polygon interpolation
// PCA
// etc.


poly = [[24,31],[24,32],[24,33],[24,34],[24,35],[24,36],[24,37],[24,38],[24,39],[24,40],[24,41],[24,42],[24,43],[24,44],[25,45],[26,46],[27,47],[28,47],[29,47],[29,48],[30,48],[31,48],[32,48],[33,48],[34,48],[35,48],[36,48],[37,48],[38,48],[39,48],[40,48],[41,48],[42,48],[43,48],[44,48],[45,48],[46,47],[47,47],[47,46],[48,46],[48,45],[49,45],[50,45],[51,44],[52,43],[53,42],[54,42],[54,41],[55,41],[56,41],[57,40],[58,40],[58,39],[59,39],[59,38],[60,38],[60,37],[61,37],[62,37],[63,36],[64,35],[65,34],[66,33],[67,33],[67,32],[68,32],[68,31],[69,31],[69,30],[70,30],[71,30],[72,29],[73,28],[74,28],[74,27],[75,27],[75,26],[76,26],[77,26],[78,26],[78,27],[77,28],[77,29],[77,30],[77,31],[77,32],[76,32],[76,33],[75,34],[75,35],[75,36],[74,36],[74,37],[73,38],[73,39],[73,40],[73,41],[73,42],[72,42],[72,43],[71,44],[71,45],[71,46],[71,47],[71,48],[71,49],[71,50],[70,50],[70,51],[69,52],[69,53],[69,54],[68,54],[68,55],[67,56],[67,57],[67,58],[66,58],[66,59],[66,60],[66,61],[65,61],[65,62],[64,63],[63,64],[62,65],[61,65],[61,66],[60,66],[59,65],[58,64],[57,64],[56,64],[56,63],[55,63],[54,62],[53,62],[52,62],[51,61],[50,61],[49,61],[48,60],[47,60],[46,60],[45,59],[44,59],[43,59],[42,59],[41,59],[40,59],[39,59],[38,59],[37,59],[36,59],[35,59],[34,59],[33,59],[32,59],[31,59],[30,59],[29,59],[28,59],[27,59],[26,59],[25,59],[24,59],[23,59],[22,59],[21,59],[20,59],[19,59],[18,59],[17,59],[16,59],[15,59],[14,59],[13,59],[13,60],[12,60],[12,61],[11,61],[11,62],[10,62],[10,63],[9,63],[9,64],[8,64],[8,65],[7,65],[7,66],[6,66],[6,67],[5,68],[5,69],[5,70],[5,71],[5,72],[5,73],[5,74],[5,75],[5,76],[5,77],[5,78],[5,79],[5,80],[5,81],[5,82],[5,83],[5,84],[5,85],[6,86],[6,87],[7,87],[7,88],[8,88],[8,89],[9,89],[9,90],[10,90],[10,91],[11,91],[11,92],[12,92],[13,93],[14,93],[15,93],[15,94],[16,94],[17,94],[18,94],[19,95],[20,95],[21,95],[22,96],[23,96],[24,96],[25,96],[26,96],[27,96],[28,96],[29,96],[30,96],[31,96],[32,96],[33,97],[34,97],[35,97],[36,97],[37,97],[38,97],[39,97],[40,97],[41,97],[42,97],[43,97],[44,97],[45,97],[46,97],[47,97],[48,97],[49,97],[50,97],[51,97],[52,97],[53,97],[54,97],[55,97],[56,97],[57,97],[58,97],[59,97],[60,97],[61,97],[62,97],[63,97],[64,97],[65,97],[65,96],[66,96],[67,96],[68,96],[69,97],[70,97],[71,97],[71,98],[72,98],[72,99],[73,99],[73,100],[74,100],[75,100],[76,100],[76,99],[76,98],[76,97],[76,96],[76,95],[77,95],[78,95],[78,94],[78,93],[78,92],[77,91],[76,90],[76,89],[75,89],[74,89],[73,89],[72,89],[71,89],[70,89],[69,89],[68,89],[67,89],[66,89],[65,89],[64,89],[63,89],[62,89],[61,89],[61,90],[60,90],[59,90],[58,90],[57,90],[56,90],[55,90],[54,90],[53,90],[52,90],[51,90],[50,90],[49,90],[48,90],[47,90],[46,90],[45,90],[44,90],[43,90],[42,90],[41,90],[40,90],[40,89],[39,89],[38,89],[37,89],[36,89],[35,89],[34,89],[33,89],[32,89],[31,89],[30,89],[29,89],[29,88],[28,88],[27,88],[26,88],[25,88],[24,88],[23,87],[22,87],[21,87],[20,86],[19,86],[18,86],[17,85],[16,85],[15,85],[15,84],[14,84],[14,83],[13,83],[13,82],[13,81],[12,80],[12,79],[12,78],[12,77],[12,76],[12,75],[12,74],[12,73],[13,72],[13,71],[13,70],[14,70],[14,69],[15,69],[15,68],[16,68],[16,67],[17,67],[17,66],[18,66],[19,66],[20,66],[21,66],[22,66],[23,66],[24,66],[25,66],[26,66],[27,66],[28,66],[29,66],[30,66],[31,66],[32,66],[33,66],[34,66],[35,66],[36,66],[37,66],[38,66],[39,66],[40,66],[41,67],[42,67],[43,67],[44,68],[45,68],[46,68],[47,69],[48,69],[49,69],[50,70],[51,70],[52,70],[52,71],[53,71],[54,72],[55,72],[56,72],[56,73],[57,73],[58,73],[59,73],[60,73],[61,73],[62,73],[63,73],[64,73],[65,73],[65,72],[66,72],[67,72],[68,72],[69,72],[69,71],[69,70],[70,69],[71,68],[71,67],[71,66],[72,66],[72,65],[73,64],[73,63],[73,62],[74,62],[74,61],[75,60],[75,59],[75,58],[76,58],[76,57],[76,56],[76,55],[77,55],[77,54],[78,53],[78,52],[78,51],[79,51],[79,50],[79,49],[79,48],[79,47],[79,46],[80,45],[80,44],[80,43],[81,43],[81,42],[81,41],[81,40],[82,40],[82,39],[83,38],[83,37],[83,36],[84,36],[84,35],[84,34],[84,33],[85,33],[85,32],[85,31],[85,30],[86,29],[86,28],[86,27],[87,27],[87,26],[88,25],[88,24],[88,23],[89,23],[89,22],[90,21],[91,20],[91,19],[91,18],[92,18],[92,17],[92,16],[92,15],[92,14],[92,13],[92,12],[92,11],[92,10],[92,9],[92,8],[92,7],[92,6],[92,5],[92,4],[91,4],[90,5],[89,6],[88,7],[87,8],[86,9],[85,10],[84,10],[84,11],[83,11],[83,12],[82,12],[82,13],[81,13],[81,14],[80,14],[79,14],[78,15],[77,16],[76,16],[76,17],[75,17],[74,17],[73,18],[72,19],[71,19],[71,20],[70,20],[70,21],[69,21],[68,21],[67,22],[66,23],[65,23],[65,24],[64,24],[64,25],[63,25],[63,26],[62,26],[61,26],[60,27],[59,28],[58,29],[57,30],[56,31],[55,31],[55,32],[54,32],[54,33],[53,33],[53,34],[52,34],[51,34],[50,35],[49,35],[49,36],[48,36],[47,36],[46,37],[45,38],[44,38],[44,39],[43,39],[43,40],[42,40],[41,40],[40,40],[40,41],[39,41],[38,41],[37,41],[36,41],[35,41],[34,41],[33,41],[32,40],[31,39],[31,38],[31,37],[31,36],[31,35],[31,34],[31,33],[31,32],[31,31],[30,31],[29,31],[28,31],[27,31],[26,31],[25,31],[24,31]]



const getMoveFromDir = (dir, turn) => {
  let move = [0, 0];
  
  turn = (turn ? 'l' : 'r'); // A black pixel means turn left, white, right
  let newDir = null;
  
  if (dir === 'e') {
    move[0] = (turn === 'l' ? -1 : 1);
    newDir = (turn === 'l' ? 'n' : 's');
  }
  if (dir === 'w') {
    move[0] = (turn === 'r' ? -1 : 1);
    newDir = (turn === 'r' ? 'n' : 's');
  }
  if (dir === 's') {
    move[1] = (turn === 'r' ? -1 : 1);
    newDir = (turn === 'r' ? 'w' : 'e');
  }
  if (dir === 'n') {
    move[1] = (turn === 'l' ? -1 : 1);
    newDir = (turn === 'l' ? 'w' : 'e');
  }
  
  let orientation = { move: move, dir: newDir };
  return orientation;
};

const traceShapePolygon = matrix => {
  
  // Extra matrix to show a nice color gradient of the tracing procedure
  let displayTracing = copyMatrix(matrix, 0);
  
  
  let start = findTopLeft(matrix);
  let current = start.slice();
  
  let polygon = [];
  polygon.push(current.slice());
  
  let dirs = [ 'e', 's', 'w', 'n' ];
  let dir = 'e';
  
  let orientation;
  
  for (let i = 0; i < 10000; i++) {
    
    orientation = getMoveFromDir(dir, matrix[current[0]][current[1]]);
    current[0] += orientation.move[0];
    current[1] += orientation.move[1];
    dir = orientation.dir;
    
    if (matrix[current[0]][current[1]]) {
      if (polygon.slice(-1).toString() !== current.toString()) {
        polygon.push(current.slice());
        displayTracing[current[0]][current[1]] = i+100;
        // displayTracing[Math.floor(current[0]+Math.random()*2-1)][Math.floor(current[1]+Math.random()*2-1)] = i+100;
      }
    } else {
      displayTracing[current[0]][current[1]] = 0;
    }
    
    if (current[0] === start[0] && current[1] === start[1])
      break;
  }
  
  console.log('len of polygon ' + polygon.length);
  
  display(displayTracing, 'trace');
  
  // console.log(JSON.stringify(polygon));
  return polygon;
};


// Takes a polygon and reduces the number of coordinates to a given value
interpolate = (polygon, n = 100) => {
  
  let magnitudes = getMagnitudes(polygon);
  let totalMagnitude = magnitudes.reduce((sum, a) => sum + a);
  // let step = totalMagnitude / n;
  
  let interp = polygon[0];
  
  // let maxlen = magnitudes.length;
  // maxlen = 10;
  // for (let i = 0; i < maxlen; i++) {
  // 
  //   let a = polygon[i];
  //   let b = polygon[i+1];
  //   let remainder = magnitudes[i];
  //   let currentStep = step;
  //   let ratio = currentStep / remainder;
  // 
  //   while (ratio < 1) {
  //     let nextPoint = [a[0] + (b[0]-a[0])*ratio, b[0] + (b[1]-a[1])*ratio];
  //     interp.push(nextPoint.slice());
  //     a = nextPoint;
  //     currentStep = step;
  //     remainder -= currentStep;
  //     ratio = currentStep / remainder;
  //   }
  //   currentStep -= magnitudes[i];
  // }
  
  
  let step = polygon.length / n;
  
  for (let i = 0; i < polygon.length; i+=step) {
    interp.push(polygon[Math.floor(i)]);
  }
  
  interp.concat(polygon.slice(-1,-10));
  return interp;
};










getMagnitudes = polygon => {
  magnitudes = [];
  
  for (let i = 0; i < polygon.length-1; i++) {
    let a = polygon[i];
    let b = polygon[i+1];
    magnitudes.push( ( (a[0]-b[0])**2 + (a[1]-b[1])**2 ) ** 0.5 );
  }
  
  return magnitudes;
};


displayPolygon(poly, 'pixel-polygon');
interp = interpolate(poly);


displayPolygon(interp, 'interpolated-polygon');








